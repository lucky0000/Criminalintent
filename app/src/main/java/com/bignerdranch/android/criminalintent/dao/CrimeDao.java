package com.bignerdranch.android.criminalintent.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bignerdranch.android.criminalintent.util.UUID2BytesConverter;
import java.util.UUID;

import com.bignerdranch.android.criminalintent.model.Crime;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CRIME".
*/
public class CrimeDao extends AbstractDao<Crime, Long> {

    public static final String TABLENAME = "CRIME";

    /**
     * Properties of entity Crime.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UId = new Property(0, Long.class, "uId", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
        public final static Property Solved = new Property(4, boolean.class, "solved", false, "SOLVED");
        public final static Property Suspect = new Property(5, String.class, "suspect", false, "SUSPECT");
    }

    private final UUID2BytesConverter idConverter = new UUID2BytesConverter();

    public CrimeDao(DaoConfig config) {
        super(config);
    }
    
    public CrimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CRIME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: uId
                "\"ID\" TEXT NOT NULL UNIQUE ," + // 1: id
                "\"TITLE\" TEXT NOT NULL ," + // 2: title
                "\"DATE\" INTEGER NOT NULL ," + // 3: date
                "\"SOLVED\" INTEGER NOT NULL ," + // 4: solved
                "\"SUSPECT\" TEXT);"); // 5: suspect
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CRIME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Crime entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
        stmt.bindString(2, idConverter.convertToDatabaseValue(entity.getId()));
        stmt.bindString(3, entity.getTitle());
        stmt.bindLong(4, entity.getDate().getTime());
        stmt.bindLong(5, entity.getSolved() ? 1L: 0L);
 
        String suspect = entity.getSuspect();
        if (suspect != null) {
            stmt.bindString(6, suspect);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Crime entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
        stmt.bindString(2, idConverter.convertToDatabaseValue(entity.getId()));
        stmt.bindString(3, entity.getTitle());
        stmt.bindLong(4, entity.getDate().getTime());
        stmt.bindLong(5, entity.getSolved() ? 1L: 0L);
 
        String suspect = entity.getSuspect();
        if (suspect != null) {
            stmt.bindString(6, suspect);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Crime readEntity(Cursor cursor, int offset) {
        Crime entity = new Crime( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uId
            idConverter.convertToEntityProperty(cursor.getString(offset + 1)), // id
            cursor.getString(offset + 2), // title
            new java.util.Date(cursor.getLong(offset + 3)), // date
            cursor.getShort(offset + 4) != 0, // solved
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // suspect
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Crime entity, int offset) {
        entity.setUId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(idConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSolved(cursor.getShort(offset + 4) != 0);
        entity.setSuspect(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Crime entity, long rowId) {
        entity.setUId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Crime entity) {
        if(entity != null) {
            return entity.getUId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Crime entity) {
        return entity.getUId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
